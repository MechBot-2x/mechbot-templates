{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# ðŸ“Š Dashboard KPI MechBot 2.0x\n",
        "\n",
        "Dashboard interactivo para monitorear los KPIs principales del proyecto MechBot."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# ðŸš€ ConfiguraciÃ³n inicial\n",
        "import plotly.express as px\n",
        "import plotly.graph_objects as go\n",
        "from datetime import datetime, timedelta\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "print(\"ðŸš€ Iniciando Dashboard KPI MechBot 2.0x\")\n",
        "print(\"=\" * 50)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# ðŸ“Š Generar datos de ejemplo para KPIs\n",
        "def generar_datos_kpi():\n",
        "    \"\"\"Genera datos de ejemplo para el dashboard\"\"\"\n",
        "    fechas = pd.date_range(start='2024-01-01', end='2024-12-31', freq='D')\n",
        "    \n",
        "    # MÃ©tricas de rendimiento\n",
        "    usuarios_activos = np.random.randint(100, 1000, len(fechas))\n",
        "    conversiones = np.random.randint(10, 100, len(fechas))\n",
        "    revenue = np.random.uniform(1000, 10000, len(fechas))\n",
        "    \n",
        "    return pd.DataFrame({\n",
        "        'fecha': fechas,\n",
        "        'usuarios_activos': usuarios_activos,\n",
        "        'conversiones': conversiones,\n",
        "        'revenue': revenue\n",
        "    })\n",
        "\n",
        "# Generar datos\n",
        "df = generar_datos_kpi()\n",
        "print(f\"ðŸ“Š Datos generados: {len(df)} registros\")\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# ðŸ“ˆ KPI 1: Usuarios Activos\n",
        "fig_usuarios = px.line(df, x='fecha', y='usuarios_activos', \n",
        "                       title='ðŸ“ˆ Usuarios Activos Diarios',\n",
        "                       labels={'usuarios_activos': 'Usuarios', 'fecha': 'Fecha'})\n",
        "fig_usuarios.update_layout(height=400)\n",
        "fig_usuarios.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# ðŸŽ¯ KPI 2: Conversiones\n",
        "df_mensual = df.resample('M', on='fecha').sum().reset_index()\n",
        "fig_conversiones = px.bar(df_mensual, \n",
        "                          x='fecha', y='conversiones',\n",
        "                          title='ðŸŽ¯ Conversiones Mensuales',\n",
        "                          labels={'conversiones': 'Conversiones', 'fecha': 'Mes'})\n",
        "fig_conversiones.update_layout(height=400)\n",
        "fig_conversiones.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# ðŸ’° KPI 3: Revenue\n",
        "fig_revenue = px.area(df, x='fecha', y='revenue',\n",
        "                      title='ðŸ’° Revenue Acumulado',\n",
        "                      labels={'revenue': 'Revenue ($)', 'fecha': 'Fecha'})\n",
        "fig_revenue.update_layout(height=400)\n",
        "fig_revenue.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# ðŸ“‹ MÃ©tricas resumen\n",
        "print(\"\\nðŸ“‹ RESUMEN DE KPIs\")\n",
        "print(\"=\" * 30)\n",
        "print(f\"â€¢ Total Usuarios: {df['usuarios_activos'].sum():,}\")\n",
        "print(f\"â€¢ Total Conversiones: {df['conversiones'].sum():,}\")\n",
        "print(f\"â€¢ Revenue Total: ${df['revenue'].sum():,.2f}\")\n",
        "print(f\"â€¢ Promedio Diario Usuarios: {df['usuarios_activos'].mean():.0f}\")\n",
        "print(f\"â€¢ Tasa ConversiÃ³n: {(df['conversiones'].sum() / df['usuarios_activos'].sum() * 100):.2f}%\")\n",
        "\n",
        "print(\"\\nâœ… Dashboard completado exitosamente!\")"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}
